plugins {
    id 'java'
    id 'application'
}

repositories {
    jcenter()
}

dependencies {
    implementation 'net.moznion:gimei:1.3.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

application {
    mainClass = 'com.example.App'
    applicationDefaultJvmArgs = ['-Djava.library.path=APP_HOME/lib']
}

class PrepareExecution extends DefaultTask {

    @OutputDirectory
    DirectoryProperty targetDirectory = project.objects.directoryProperty()

    @TaskAction
    void run() {
        def target = targetDirectory.get().asFile
        if (!target.exists()) {
            target.mkdirs()
        }
    }
}

task prepareExecution(type: PrepareExecution) {
    targetDirectory.set(file("$buildDir/native-image-config"))
}

def cppLib = project(':cpp-lib')
task copyLib(type: Copy) {
    def linkTask = cppLib.tasks.withType(LinkSharedLibrary).findByName('linkRelease')
    from linkTask
    into "$buildDir/cpp-lib"
}

run.dependsOn 'copyLib', 'prepareExecution'
run.jvmArgs(
        "-Djava.library.path=${cppLib.buildDir}/lib/main/release",
        "-agentlib:native-image-agent=config-output-dir=$buildDir/native-image-config")
distributions {
    main {
        contents {
            from(copyLib) {
                into 'lib'
            }
        }
    }
}

task modifyScript(dependsOn: 'startScripts') {
    def destinationDir = file("$buildDir/mod-scripts")
    outputs.dir(destinationDir)
    doLast {
        if (!destinationDir.exists()) destinationDir.mkdirs()
        tasks.findByName('startScripts').outputs.files.collect { artifact ->
            if (artifact.isFile()) [artifact]
            else artifact.listFiles().toList()
        }.flatten().each { scriptFile ->
            String fileName = scriptFile.name
            def w = new StringWriter()
            scriptFile.text.eachLine { line ->
                if (line.contains('DEFAULT_JVM_OPTS') && line.contains('java.library.path')) {
                    if (fileName.endsWith('bat')) {
                        w << line.replace('APP_HOME', '%APP_HOME%')
                    } else {
                        w << line.replace('APP_HOME', '$APP_HOME')
                    }
                } else {
                    w << line
                }
                w << '\n'
            }
            destinationDir.toPath().resolve(fileName).write("$w", 'UTF-8')
        }
    }
}

task overrideScripts(dependsOn: 'modifyScript', type: Copy) {
    from modifyScript
    into startScripts.outputDir
}

distTar.dependsOn overrideScripts
distZip.dependsOn overrideScripts

task testPrepareExecution(type: PrepareExecution) {
    targetDirectory.set(project.file("$buildDir/native-image-test-config"))
}

test {
    dependsOn 'copyLib'
    useJUnitPlatform()
    jvmArgs(
            "-Djava.library.path=${cppLib.buildDir}/lib/main/release",
            "-agentlib:native-image-agent=config-output-dir=$buildDir/native-image-test-config"
    )
}
